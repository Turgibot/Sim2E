'''
Converts the npz file generated by the simulator to h5 file in a format that can be used by the model.
'''
import numpy as np
import pathlib
from collections import  OrderedDict
import os
import h5py
import argparse
from tqdm import tqdm
import cv2
import esim_torch as esim_torch
import torch



def video_to_h5(source_path="../images", target_folder="../h5_data", neg_th = 0.18,pos_th=0.18):
    esim = esim_torch.esim_torch.EventSimulator_torch(neg_th,pos_th,1e6)
    images = [x for x in os.listdir(source_path) if x.endswith(".png")]
    images.sort()
    counter = 0
    pathlib.Path(target_folder).mkdir(parents=True, exist_ok=True)
    
    with open(os.path.join(source_path, "timestamps.txt"), "r") as f:
        lines = f.readlines()
        # lines.sort()
        timestamps = [x.split(' ')[1] for x in lines]
        timestamps = np.array([float(x)*1e10 for x in timestamps], dtype=np.int64)
        timestamps_ns = torch.from_numpy(timestamps) #.cuda()
    
    for i, image in enumerate(tqdm(images)):
        image_path = os.path.join(source_path, image)
        img = cv2.imread(image_path)
        shape = img.shape
        image = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
        log_image = np.log(image.astype("float32") / 255 + 1e-5)
        log_image = torch.from_numpy(log_image) #.cuda()
        sub_events = esim.forward(log_image, timestamps_ns[i])
   
        # for the first image, no events are generated, so this needs to be skipped
        if sub_events is not None:
            sub_events = {k: v.cpu() for k, v in sub_events.items()}    
            spike_frame = render(shape=shape, **sub_events)
            all_frames = cv2.vconcat([img, spike_frame])
        else:
            continue

        # record the events and the frame 
        if sub_events is not None:
            
            output_path = os.path.join(target_folder, "%010d.npz" % i)
            sub_events["img"] = image
            np.savez(output_path, **sub_events)
        
        cv2.imshow("", all_frames)
        if cv2.waitKey(1) == 27:
            break
        
    cv2.destroyAllWindows()

def render(x, y, t, p, shape):
    img = np.full(shape=shape, fill_value=0, dtype="uint8")
    img[y, x, :] = 0
    img[y, x, p] = 255
    return img

            
if __name__ == "__main__":

    # parser = argparse.ArgumentParser(
    #     description='Convertion of all npz files in a folder to a single h5')
    # parser.add_argument('-s', '--source_folder', default="/home/guy/Projects/Results/ECOCO/frames", type=str,
    #                     help='path to the parent folder containing the video as frames')
    # parser.add_argument('-o', '--output_folder', default="/home/guy/Projects/Results/ECOCO/npz_data/", type=str)
    # args = parser.parse_args()
    # video_to_h5(args.source_folder, args.output_folder)

    validation_path = "/home/guy/Projects/Results/ECOCO/validation"
    coco_path = "/home/guy/Projects/Results/ECOCO/npz_data"
    for sequence in os.listdir(validation_path):
        sequence_path = os.path.join(validation_path, sequence)
        frames_path = os.path.join(sequence_path, "frames")
        output_path = os.path.join(coco_path, sequence.split("_")[1])
        pathlib.Path(output_path).mkdir(parents=True, exist_ok=True)
        video_to_h5(frames_path, output_path)

